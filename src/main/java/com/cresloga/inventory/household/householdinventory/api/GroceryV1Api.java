/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cresloga.inventory.household.householdinventory.api;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cresloga.inventory.household.householdinventory.models.dto.GetAllResponse;
import com.cresloga.inventory.household.householdinventory.models.dto.GetResponse;
import com.cresloga.inventory.household.householdinventory.models.dto.Item;
import com.cresloga.inventory.household.householdinventory.models.dto.Items;
import com.cresloga.inventory.household.householdinventory.models.dto.Status;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-02T11:32:34.017Z[GMT]")
@Api(value = "v1", description = "the v1 API")
public interface GroceryV1Api {

	@ApiOperation(value = "Create an Item", nickname = "createV1", notes = "Create an item", tags = { "Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Status> createV1(@ApiParam(value = "") @Valid @RequestBody Item body);

	@ApiOperation(value = "Delete an Item", nickname = "deleteByIdV1", notes = "Delete an item", tags = {
			"Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Deleted"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries/{id}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Status> deleteByIdV1(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

	@ApiOperation(value = "Get all Items", nickname = "getAllV1", notes = "Get All grocery items in the household", response = Items.class, tags = {
			"Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Items.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<GetAllResponse> getAllV1();

	@ApiOperation(value = "Get an Item", nickname = "getByIdV1", notes = "Get a specific grocery item by id", response = Item.class, tags = {
			"Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Item.class),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries/{id}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<GetResponse> getByIdV1(@ApiParam(value = "", required = true) @PathVariable("id") Integer id);

	@ApiOperation(value = "Replace an Item", nickname = "replaceByIdV1", notes = "Replace an item", tags = {
			"Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Replaced"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries/{id}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Status> replaceByIdV1(@ApiParam(value = "", required = true) @PathVariable("id") Integer id,
			@ApiParam(value = "") @Valid @RequestBody Item body);

	@ApiOperation(value = "Update an Item", nickname = "updateByIdV1", notes = "Update a specific grocery item by id", tags = {
			"Groceries", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "Updated"),
			@ApiResponse(code = 400, message = "Bad Request", response = Error.class),
			@ApiResponse(code = 500, message = "Internal Server Error", response = Error.class) })
	@RequestMapping(value = "/v1/groceries/{id}/quantity/{quantity}", produces = {
			"application/json" }, method = RequestMethod.PATCH)
	ResponseEntity<Status> updateByIdV1(@ApiParam(value = "", required = true) @PathVariable("id") Integer id,
			@ApiParam(value = "", required = true) @PathVariable("quantity") BigDecimal quantity);

}
